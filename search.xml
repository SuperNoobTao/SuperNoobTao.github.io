<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>论职业素养</title>
    <url>/2019/11/15/%E8%AE%BA%E8%81%8C%E4%B8%9A%E7%B4%A0%E5%85%BB/</url>
    <content><![CDATA[<h2 id="为什么要写这篇？"><a href="#为什么要写这篇？" class="headerlink" title="为什么要写这篇？"></a>为什么要写这篇？</h2><p>为什么要写关乎于职业素养这种东西呢？因为我在开发中深感疲惫，人生已经如此艰难，为什么做个开发还要承受这么大的压力呢。总结了一下，可能会有以下几点:</p>
<ol>
<li>产品人员需求朝令夕改，不同步至文档</li>
<li>产品人员对需求描述不详细，不确定</li>
<li>开发人员需求评审不认真</li>
<li>开发人员技术评审不认真</li>
<li>开发人员太依赖于服务端（我感觉都是服务端的爹，天天都要催）</li>
<li>开发人员间信息不同步</li>
<li>开发人员没有主观能动性，遇事能拖就拖</li>
<li>开发人员没有时间观念</li>
<li>开发人员对提测，上线等重要里程碑式阶段不重视</li>
<li>开发人员排期不合理，导致每次里程碑式阶段都延期or加班</li>
</ol>
<p>随便一想就有这么多，种种原因不得不让我思索是不是开发人员的技术有问题，在和同事的讨论中，认为平常的开发真的不需要水平很高，如此，产生了对&lt;职业素养&gt;一词的思索。</p>
<h2 id="何为职业素养？"><a href="#何为职业素养？" class="headerlink" title="何为职业素养？"></a>何为职业素养？</h2><p>我个人职业素养的核心在于 做好&lt;份内之事&gt;。</p>
<h2 id="何为份内之事"><a href="#何为份内之事" class="headerlink" title="何为份内之事?"></a>何为份内之事?</h2><p>有的人可能会说”我做好自己份内之事就行了”。那么到底什么是份内之事呢？以下论点只限于一个开发工程师，我们来从上之下捋一下作为一个工程师的”份内之事”。</p>
<h3 id="需求分析阶段"><a href="#需求分析阶段" class="headerlink" title="需求分析阶段"></a>需求分析阶段</h3><p>按计划，产品经理应当视需求内容提前相应的天数，以邮件形式通知开发人员有新需求。开发人员在接到邮件后，应当梳理现在手头上的工作，将阅读需求放在你的待办事项上，阅读需求也不是草草而看，在阅读时，应当思考以下几点：</p>
<ol>
<li>此需求是否合理</li>
<li>此需求的优先级</li>
<li>此需求的大致相关实现</li>
<li>列出在阅读需求文档时心中的疑惑</li>
</ol>
<p>阅读完需求文档，你应该有相应的输出：</p>
<ol>
<li>大致的实现思路（一般以xmind形式）</li>
<li>需求中遇到的问题（一般以文本形式即可）</li>
</ol>
<p>将《需求问题》反馈至产品经理，产品经理做出相应的解答并发邮件告知。如反馈不到位，可当面进行沟通并做记录，直至双方对需求都有大致的共同认知。</p>
<p>在参加需求评审的过程中，因为需求评审是多方的一个会议，应当积极的参与讨论。在需求文档中将所有的需求都了然于胸。</p>
<h3 id="技术评审"><a href="#技术评审" class="headerlink" title="技术评审"></a>技术评审</h3><p>在确定完需求之后，开发人员应该对之前在需求文档中编写的大致实现做出细致的描写，以及轻微的改动，并与其他开发人员进行沟通，达成一致。将整个迭代任务的实现思路，详细的描绘至xmind脑图，如果有难以判断的任务可相应的询问上级开发征求意见，以每天8h的工作量估算排期，将排期尽量细化，考虑周全。做足一切准备之后进行开发。</p>
<h3 id="接口评审"><a href="#接口评审" class="headerlink" title="接口评审"></a>接口评审</h3><p>由于做好了准备，所以接口定义并不难，在接口定义时需要考虑向后兼容，并提供模拟数据，写好注释,可以交由组长检查或者找同事相互校队。</p>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>编码时，要保持良好的编码习惯，秉持高内聚、低耦合的观念，不要在一个类中写长篇大论，具体编码规约可参考【阿里巴巴编码规范】，遇到重复代码时考虑设计模式。写好注释，不然后来的人不一定看得懂。</p>
<p>在编码时如果经常要改动之前定义的接口，说明自己没有思考到位，在通知客户端接口变更的同时也要告诫自己在前期多思考。</p>
<p>编码期间不要忘了测试用例的编写，测试用例能让后来的人更能了解这串代码的作用，以及需要注意的点。</p>
<h3 id="自测"><a href="#自测" class="headerlink" title="自测"></a>自测</h3><p>编码完成之后，需要跟着测试用例将自己的功能实现进行反复的验证，做到最基本的测试，比如边界测试等，不能让测试人员进行测试时，频繁的报&lt;服务器错误&gt;。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>个人认为测试期间是开发人员比较空的时间，在测试期间，遇到bug应当积极改正，如果同事比较忙，可协助更改一些简单的bug。在测试期间需要对跟踪测试环境的日志，遇到错误日志应当积极改正。</p>
<h3 id="预发-amp-上线"><a href="#预发-amp-上线" class="headerlink" title="预发&amp;上线"></a>预发&amp;上线</h3><p>上线期间，保持高度的严谨，保证在上线的期间，处于待命状态，遇到问题尽快的定位并解决。</p>
<h3 id="上线后"><a href="#上线后" class="headerlink" title="上线后"></a>上线后</h3><p>在项目完成上线后，切不可怠慢，需要持续跟踪监视数据库中的数据是否正确，是否有不应该为空的字段为空。</p>
<p>并且要持续跟踪日志，看有无相关报错。在此期间可以进行code review，熟悉相关代码。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人觉得，如果开发人员每个人都能做到遇事积极解决，发挥主观能动性，其实做开发也不是一件很累的事情。有的人可能会抱怨，产品的需求变化多端搞得自己很累，其实产品的需求变化是不可避免，我们开发人员唯一要做的就是当产品提出需求变化时，怎样能使得开发更加轻松。</p>
]]></content>
  </entry>
  <entry>
    <title>test for pic</title>
    <url>/2019/11/14/test-for-pic/</url>
    <content><![CDATA[<p><img src="/2019/11/14/test-for-pic/sss.jpg" alt="说的是事实"></p>
<a id="more"></a>

<p>阿斯顿阿斯顿阿斯顿 </p>
]]></content>
  </entry>
  <entry>
    <title>Solr or Elasticsearch</title>
    <url>/2019/11/14/Solr-or-Elasticsearch/</url>
    <content><![CDATA[<p>Elasticsearch是一个实时的分布式搜索和分析引擎。它可以帮助你用前所未有的速度去处理大规模数据。</p>
<p>它可以用于全文搜索，结构化搜索以及分析，当然你也可以将这三者进行组合。</p>
<a id="more"></a>

<p>Elasticsearch是一个建立在全文搜索引擎 Apache Lucene™ 基础上的搜索引擎，可以说Lucene是当今最先进，最高效的全功能开源搜索引擎框架。</p>
<p>但是Lucene只是一个框架，要充分利用它的功能，需要使用JAVA，并且在程序中集成Lucene。需要很多的学习了解，才能明白它是如何运行的，Lucene确实非常复杂。</p>
<p>Elasticsearch使用Lucene作为内部引擎，但是在使用它做全文搜索时，只需要使用统一做好的API即可，而不需要了解其背后复杂的Lucene的运行原理。</p>
<p>当然Elasticsearch并不仅仅是Lucene这么简单，它不但包括了全文搜索功能，还可以进行以下工作:</p>
<ul>
<li>分布式实时文件存储，并将每一个字段都编入索引，使其可以被搜索。</li>
<li>实时分析的分布式搜索引擎。</li>
<li>可以扩展到上百台服务器，处理PB级别的结构化或非结构化数据。</li>
</ul>
<p>这么多的功能被集成到一台服务器上，你可以轻松地通过客户端或者任何你喜欢的程序语言与ES的RESTful API进行交流。</p>
<p>Elasticsearch的上手是非常简单的。它附带了很多非常合理的默认值，这让初学者很好地避免一上手就要面对复杂的理论，</p>
<p>它安装好了就可以使用了，用很小的学习成本就可以变得很有生产力。</p>
<p>随着越学越深入，还可以利用Elasticsearch更多高级的功能，整个引擎可以很灵活地进行配置。可以根据自身需求来定制属于自己的Elasticsearch。</p>
<p>使用案例：</p>
<ul>
<li>维基百科使用Elasticsearch来进行全文搜做并高亮显示关键词，以及提供search-as-you-type、did-you-mean等搜索建议功能。</li>
<li>英国卫报使用Elasticsearch来处理访客日志，以便能将公众对不同文章的反应实时地反馈给各位编辑。</li>
<li>StackOverflow将全文搜索与地理位置和相关信息进行结合，以提供more-like-this相关问题的展现。</li>
<li>GitHub使用Elasticsearch来检索超过1300亿行代码。</li>
<li>每天，Goldman      Sachs使用它来处理5TB数据的索引，还有很多投行使用它来分析股票市场的变动。</li>
</ul>
<p>但是Elasticsearch并不只是面向大型企业的，它还帮助了很多类似DataDog以及Klout的创业公司进行了功能的扩展。</p>
<p>Elasticsearch的优缺点<a href="http://link.zhihu.com/?target=http%3A//stackoverflow.com/questions/10213009/solr-vs-elasticsearch">*</a><a href="http://link.zhihu.com/?target=http%3A//huangx.in/22/translation-solr-vs-elasticsearch">*</a>:</p>
<p>优点</p>
<ol>
<li>Elasticsearch是分布式的。不需要其他组件，分发是实时的，被叫做”Push      replication”。</li>
<li>Elasticsearch      完全支持 Apache Lucene 的接近实时的搜索。</li>
<li>处理多租户（<a href="http://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Multitenancy">multitenancy</a>）不需要特殊配置，而Solr则需要更多的高级设置。</li>
<li>Elasticsearch      采用 Gateway 的概念，使得完备份更加简单。</li>
<li>各节点组成对等的网络结构，某些节点出现故障时会自动分配其他节点代替其进行工作。</li>
</ol>
<p>缺点</p>
<ol>
<li>只有一名developer（当前Elasticsearch      GitHub组织已经不只如此，已经有了相当活跃的维护者）</li>
<li>还不够自动（不适合当前新的Index      Warmup API）</li>
</ol>
<p>Solr简介<a href="http://link.zhihu.com/?target=http%3A//zh.wikipedia.org/wiki/Solr">*</a></p>
<p>Solr（读作“solar”）是Apache Lucene项目的开源企业搜索平台。其主要功能包括全文检索、命中标示、分面搜索、动态聚类、数据库集成，以及富文本（如Word、PDF）的处理。Solr是高度可扩展的，并提供了分布式搜索和索引复制。Solr是最流行的企业级搜索引擎，Solr4 还增加了NoSQL支持。</p>
<p>Solr是用Java编写、运行在Servlet容器（如 Apache Tomcat 或Jetty）的一个独立的全文搜索服务器。 Solr采用了 Lucene Java 搜索库为核心的全文索引和搜索，并具有类似REST的HTTP/XML和JSON的API。Solr强大的外部配置功能使得无需进行Java编码，便可对其进行调整以适应多种类型的应用程序。Solr有一个插件架构，以支持更多的高级定制。</p>
<p>因为2010年 Apache Lucene 和 Apache Solr 项目合并，两个项目是由同一个Apache软件基金会developement团队制作实现的。提到技术或产品时，Lucene/Solr或Solr/Lucene是一样的。</p>
<p>Solr的优缺点</p>
<p>优点</p>
<ol>
<li>Solr有一个更大、更成熟的用户、developer和贡献者社区。</li>
<li>支持添加多种格式的索引，如：HTML、PDF、微软      Office 系列软件格式以及 JSON、XML、CSV 等纯文本格式。</li>
<li>Solr比较成熟、稳定。</li>
<li>不考虑建索引的同时进行搜索，速度更快。</li>
</ol>
<p>缺点</p>
<ol>
<li>建立索引时，搜索效率下降，实时索引搜索效率不高。</li>
</ol>
<p>Elasticsearch与Solr的比较<a href="http://link.zhihu.com/?target=http%3A//blog.socialcast.com/realtime-search-solr-vs-elasticsearch/">*</a></p>
<p>当单纯的对已有数据进行搜索时，Solr更快。</p>
<p>Search Fesh Index While Idle</p>
<p>当实时建立索引时, Solr会产生io阻塞，查询性能较差, Elasticsearch具有明显的优势。</p>
<p>search_fresh_index_while_indexing</p>
<p>随着数据量的增加，Solr的搜索效率会变得更低，而Elasticsearch却没有明显的变化。</p>
<p>search_fresh_index_while_indexing</p>
<p>综上所述，Solr的架构不适合实时搜索的应用。</p>
<p>实际生产环境测试<a href="http://link.zhihu.com/?target=http%3A//blog.socialcast.com/realtime-search-solr-vs-elasticsearch/">*</a></p>
<p>下图为将搜索引擎从Solr转到Elasticsearch以后的平均查询速度有了50倍的提升。</p>
<p>average_execution_time</p>
<p>Elasticsearch 与 Solr 的比较总结</p>
<ul>
<li>二者安装都很简单；</li>
<li>Solr      利用 Zookeeper 进行分布式管理，而 Elasticsearch 自身带有分布式协调管理功能;</li>
<li>Solr      支持更多格式的数据，而 Elasticsearch 仅支持json文件格式；</li>
<li>Solr      官方提供的功能更多，而 Elasticsearch 本身更注重于核心功能，高级功能多有第三方插件提供；</li>
<li>Solr      在传统的搜索应用中表现好于 Elasticsearch，但在处理实时搜索应用时效率明显低于 Elasticsearch。</li>
</ul>
<p>Solr 是传统搜索应用的有力解决方案，但 Elasticsearch 更适用于新兴的实时搜索应用。</p>
<p>其他基于Lucene的开源搜索引擎解决方案<a href="http://link.zhihu.com/?target=http%3A//mail-archives.apache.org/mod_mbox/hbase-user/201006.mbox/%253C149150.78881.qm%40web50304.mail.re2.yahoo.com%253E">*</a></p>
<ol>
<li>直接使用 <a href="http://link.zhihu.com/?target=http%3A//lucene.apache.org/">Lucene</a></li>
</ol>
<p>说明：Lucene 是一个 JAVA 搜索类库，它本身并不是一个完整的解决方案，需要额外的工作。</p>
<p>优点：成熟的解决方案，有很多的成功案例。apache 顶级项目，正在持续快速的进步。庞大而活跃的社区，大量的developers。它只是一个类库，有足够的定制和优化空间：经过简单定制，就可以满足绝大部分常见的需求；经过优化，可以支持 10亿+ 量级的搜索。</p>
<p>缺点：需要额外的工作。所有的扩展，分布式，可靠性等都需要自己实现；非实时，从建索引到可以搜索中间有一个时间延迟，而当前的“近实时”(Lucene Near Real Time search)搜索方案的可扩展性有待进一步完善</p>
<ul>
<li><a href="http://link.zhihu.com/?target=http%3A//katta.sourceforge.net/">Katta</a></li>
</ul>
<p>说明：基于 Lucene 的，支持分布式，可扩展，具有容错功能，准实时的搜索方案。</p>
<p>优点：开箱即用，可以与 Hadoop 配合实现分布式。具备扩展和容错机制。</p>
<p>缺点：只是搜索方案，建索引部分还是需要自己实现。在搜索功能上，只实现了最基本的需求。成功案例较少，项目的成熟度稍微差一些。因为需要支持分布式，对于一些复杂的查询需求，定制的难度会比较大。</p>
<ul>
<li><a href="http://link.zhihu.com/?target=http%3A//svn.apache.org/repos/asf/hadoop/mapreduce/trunk/src/contrib/index/README">Hadoop      contrib/index</a></li>
</ul>
<p>说明：Map/Reduce 模式的，分布式建索引方案，可以跟 Katta 配合使用。</p>
<p>优点：分布式建索引，具备可扩展性。</p>
<p>缺点：只是建索引方案，不包括搜索实现。工作在批处理模式，对实时搜索的支持不佳。</p>
<ul>
<li><a href="http://link.zhihu.com/?target=http%3A//sna-projects.com/">LinkedIn      的开源方案</a></li>
</ul>
<p>说明：基于 Lucene 的一系列解决方案，包括 准实时搜索 zoie ，facet 搜索实现 bobo ，机器学习算法 decomposer ，摘要存储库 krati ，数据库模式包装 sensei 等等</p>
<p>优点：经过验证的解决方案，支持分布式，可扩展，丰富的功能实现</p>
<p>缺点：与 linkedin 公司的联系太紧密，可定制性比较差</p>
<ul>
<li><a href="http://link.zhihu.com/?target=https%3A//github.com/tjake/Lucandra">Lucandra</a></li>
</ul>
<p>说明：基于 Lucene，索引存在 cassandra 数据库中</p>
<p>优点：参考 cassandra 的优点</p>
<p>缺点：参考 cassandra 的缺点。另外，这只是一个 demo，没有经过大量验证</p>
<ul>
<li><a href="http://link.zhihu.com/?target=https%3A//github.com/akkumar/hbasene">HBasene</a></li>
</ul>
<p>说明：基于 Lucene，索引存在 HBase 数据库中</p>
<p>优点：参考 HBase 的优点</p>
<p>缺点：参考 HBase 的缺点。另外，在实现中，lucene terms 是存成行，但每个 term 对应的 posting lists 是以列的方式存储的。随着单个 term 的 posting lists 的增大，查询时的速度受到的影响会非常大。</p>
]]></content>
      <categories>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>Solr</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>策略与简单工厂</title>
    <url>/2019/11/14/%E7%AD%96%E7%95%A5%E4%B8%8E%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/</url>
    <content><![CDATA[<p>应用场景：</p>
<p>简单工厂：重点在对象的创建</p>
<p>策略：重点在算法的封装</p>
<a id="more"></a>

<p>简单工厂：</p>
<p><img src="file:///C:/Users/38794/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/TempState/msohtmlclip/clip_image001.png" alt="A  Factory  Factory  + CreatProduct()  A  product  productA  A  pro  producte  A  productC "></p>
<p>客户端通过某个指令就可触发工厂对于对象的创建，对工厂内部创建对象的过程高度闭合。但是客户端需要清晰的知道产品种类才能创建出来。</p>
<p>策略&lt;原始&gt;：</p>
<p><img src="file:///C:/Users/38794/AppData/Local/Packages/Microsoft.Office.OneNote_8wekyb3d8bbwe/TempState/msohtmlclip/clip_image002.png" alt="A  Content  Content  + Contentlnterface()  A  A  Strategy  A  StrategyA  + Alfoeirhmlnterface()  _5tra  + Alfoeirhminterface()  SErategyB  + Alfoeirhmlnterface()  A  SErategyC  + Alfoeirhmlnterface() "></p>
<p>context中定义了strategy的抽象策略。依靠传进来的具体策略进行策略的执行。由客户端将策略传过来，所以客户端需要知晓所有的策略。</p>
<p>通过比较客户端的代码发现： </p>
<p>简单工厂模式：将对象的选择创建交给了简单工厂类，客户端只需要输入相应的条件就可以，不用负责对象的创建，但是需要客户端自己调用算法类的方法。但是一旦需要增加新的运算类，比如开根运算，就要去修改简单工厂类。 </p>
<p>策略模式：对象的选择创建仍需要自己来做，但是将调用方法的职责交给了Context类。一旦需要增加新的策略需要修改客户端。</p>
<p>因此，简单工厂模式的缺点就是当有新的需求增加时，需要频繁的修改工厂类。只用策略模式，当有新的需求增加时需要修改的是客户端，客户端仍然承担着创建对象的职责，并没有减轻客户端的压力。而将这两种模式结合起来使用，则需要修改 Context 类，总之不是完美的。</p>
<p>策略&lt;简单工厂改进版&gt;：</p>
<p>用来简单工厂来改进之后，也可以通过指令就可以触发策略以及context对象的创建。同样，客户端还是需要知道策略种类才能创建出来。</p>
<p>策略模式中的确有简单工厂的影子。比如具体的策略其实是由简单工厂所创建。但是策略模式的着重点在于将策略从中解耦，抽离出来，以便策略的转换</p>
<p>无论是产品的创建，还是策略的创建。往小了说，其实都是黑盒，因为客户端都不知道里面是怎么实现的。往大了说，那就是白盒，因为客户端必须知道产品的种类抑或是策略的种类才能使程序正常进行下去。网上有一部分人说策略是白盒，工厂是黑盒，我觉得很莫名其妙，我理解他们觉得策略是白盒是因为客户端需要传个策略对象，所以必须知道所有的策略才能创建。而觉得工厂是黑盒是因为对象的创建是完全封闭的。但是这两个判断白盒黑盒的条件个人认为不太对等，策略的创建那他妈也是黑盒啊。</p>
<p>一个是创建型，另一个是行为型，然而两种不同类型的模式，在某些地方也有一丝的相似之处，同时在某种场景下结合使用，能起到特别好的效果。</p>
<p>题外话：网上有人认为简单工厂严格上不算作设计方式，可以当作一种编写良好代码的习惯。</p>
<p>个人理解：我觉得策略模式是针对于某种特定场景，比如：抽奖，活动，算法等场景，而研发出的一种设计模式，其中策略的创建借鉴了简单工厂的思想。将每一个算法封装起来后，使它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。</p>
<p>总结简单工厂模式和策略模式</p>
<p>1.从类型上说：简单工厂模式属于创建型模式，而策略模式属于行为型模式。 </p>
<p>2.接下来，看一个小例子： </p>
<p>斧子有很多种，有一个工厂专门负责生产各种需求的斧子。</p>
<p>工厂模式： </p>
<p>1）根据你给出的目的来生产不同用途的斧子，例如要砍人，那么工厂生产砍人斧子，要伐木就生产伐木斧子。 </p>
<p>2）即根据你给出一些属性来生产不同行为的一类对象返回给你。 </p>
<p>3）关注对象创建</p>
<p>策略模式： </p>
<p>1）用工厂生产的斧子来做对应的事情，例如用砍人的斧子来砍人，用伐木的斧子来伐木。 </p>
<p>2）即根据你给出对应的对象来执行对应的方法。 </p>
<p>3）关注行为的选择</p>
<p>3.简单工厂模式：根据客户选择的条件，来帮客户创建一个对象。 </p>
<p>策略模式：客户给它一个创建好的对象，它来帮客户做相应的事。</p>
<p>策略模式和简单工厂模式看起来很相似，都是通过多态来实现不同子类的选取，这样的思想应该是从程序的总体来看得出的。</p>
<p>假设从使用这两种模式的角度来看的话，我们会发如今<a href="http://www.tianboo.net/" target="_blank" rel="noopener">简单工厂模式</a>中我们仅仅须要传递对应的条件就能得到想要的一个对象（告诉别人我要干嘛、别人去做），然后通过这个对象实现算法的操作。</p>
<p>而<a href="http://www.tianboo.net/" target="_blank" rel="noopener">策略模式</a>，使用时必须首先创建一个想使用的类对象（自己去做）。然后将该对象最为參数传递进去，通过该对象调用不同的算法。在简单工厂模式中实现了通过条件选取一个类去实例化对象，策略模式则将选取对应对象的工作交给模式的使用者，它本身不去做选取工作。</p>
<p>结合上面的代码和以下的释义不难看出。事实上两个的区别非常微妙,工厂(factory)是直接创建详细的对象并用该对象去运行对应的动作，而策略(strategy)将这个操作给了Context类。没有创建详细的对象，实现的代码的进一步封装，client代码并不须要知道详细的实现过程。</p>
<p>当然用的最多的还是两者的结合使用。</p>
<p>重点：</p>
<p>设计模式主要是实践设计原则的（单一职责，开闭原则，依赖倒置原则，迪米特法则）</p>
<p>所有的设计原则都是围绕着一个观点那就是封装变化</p>
<p>如果把变化封装的足够好，我们就可以再变化到来的时候做最小的应对，也就是最小程度的改代码</p>
<p>模式就是一种经验，一种成熟的做法</p>
<p>抽象工厂模式用于创建对象时的变化</p>
<p>策略模式用于算法实现时的变化</p>
<p>他们本质上都是变化</p>
<p>封装变化最好的方法，就是依赖抽象，利用多态，面向接口编程</p>
<p>有了里氏代换原则，才使得开放-封闭原则成为了可能</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>策略模式</tag>
        <tag>简单工厂</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
